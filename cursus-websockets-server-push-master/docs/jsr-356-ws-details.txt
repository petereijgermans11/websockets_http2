http://download.oracle.com/otn-pub/jcp/websocket-1_1-mrel-eval-spec/websocket-1.1-maintenance-release-final.pdf
http://www.ietf.org/rfc/rfc6455.txt
http://dev.w3.org/html5/websockets

JSR-356 1.1: 52p waarvan 28 contents
 peer: Used in the context of a websocket endpoint, the websocket peer is used to represent the another participant of the websocket interactions with the endpoint.
 client: endpoint that _initiates_ a connection to a peer
 appserver: 1 WebSocketContainer instance per app per VM; cfg <<wat precies?>>
 client app: obtain instance of WebSocketContainer from ContainerProvider

cfg per @ServerEndpoint: 
 (default ServerEndpointConfig; custom ServerEndpointConfig.Configurator.modifyHandshake() impl, e.g. cookie handling)
 supported subprotocols: select first server-supported one contained within client-supplied subprotocols, or none if there is no match
 required extensions: client supplies list of extensions that it would like to use. Selects the supported ones in client order.
 hostname Origin header verified
  
Java WebSocket Client API: desktop, tablet or smartphone; javax.websocket.*.
 WebSocketContainer.connectToServer()
 Java7+

server: JEE6+
 subclass Endpoint class: req's ServerApplicationConfig
 1 instance per peer (per app per VM) & hoeft niet @ThreadSafe te zijn
 Session.getUserProperties(): te schrijven Map
 subtype of MessageHandler iface
 1 MessageHandler per native websocket message type (text, bin, pong [PongMessage]) per Session
 Session.addMessageHandler(MessageHandler) not always safe for use (esp. with Lambdas); 
  must directly directly impl MessageHandler.Whole or MessageHandler.Partial
 or use Session.addMessageHandler(Class<T>, MessageHandler.Partial<T>) or Session.addMessageHandler(Class<T>, MessageHandler.Whole<T>)
 peer: RemoteEndpoint iface & subtypes RemoteEndpoint.Whole and RemoteEndpoint.Partial

auth:
- "if the opening handshake request is already authenticated with the server, the opening handshake
API allows the developer to query the user Principal of the request. If the connection is established with the
requesting client, the websocket implementation considers the user Principal for the associated websocket
Session to be the user Principal that was present on the opening handshake."
- iff websocket endpoint is a protected resource in the webapp (req's authorized user): 
  appserver must close conn. @ user logout or auth timeout; close code 1008."
- std. JEE security applies (role, security-constraint; GET only, auth, transport guarantee)
> login first on HTTPS, then UPGRADE to wss (browser will send (auth) cookies because of same-origin?!)
> NONE=>ws; CONFIDENTIAL=>wss

public class HelloServer extends Endpoint {
@Override
public void onOpen(Session session, EndpointConfig ec) {
final RemoteEndpoint.Basic remote = session.getBasicRemote();
session.addMessageHandler(String.class,
new MessageHandler.Whole<String>() {
public void onMessage(String text) {
try {
remote.sendText("Got your message (" + text + "). Thanks !");
} catch (IOException ioe) {
ioe.printStackTrace();
}
}
});
}
}

close initiated by local container, e.g., session timeout: close code 1006

@ServerEndpoint(value="URI mapping"[,encoders,decoders,subprotocols,configurator]): must be public, concrete, & have public no-arg c'tor
@ClientEndpoint([encoders,decoders,subprotocols,configurator])

@OnOpen([maxMessageSize=-1])
@OnClose: initiated by remote peer, local container or session.close()
 [CloseReason] => close code 1009: Too Big; msg>maxMessageSize
@OnMessage
@OnError // e.g. failed decoding incoming msg. Appserver must log if not registered or if method itself fails
 Throwable
allevier:
 T message
 [@PathParam] >=0
 [Session]
